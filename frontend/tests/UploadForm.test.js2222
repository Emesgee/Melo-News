import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BrowserRouter as Router } from 'react-router-dom'; // Import BrowserRouter
import '@testing-library/jest-dom';
import UploadForm from '../src/pages/UploadForm';
import axios from 'axios';

// Mocking axios to control API responses
jest.mock('axios');

describe('UploadForm Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const renderWithRouter = (ui) => {
    return render(<Router>{ui}</Router>);
  };

  it('renders all form sections properly', () => {
    renderWithRouter(<UploadForm />);

    // We need to use `getAllByRole` because there are multiple headings with the same name.
    const headings = screen.getAllByRole('heading', { name: /File Upload/i });
    expect(headings.length).toBeGreaterThan(0);

    expect(screen.getByRole('heading', { name: /General Information/i })).toBeInTheDocument();
    expect(screen.getByRole('heading', { name: /Location Information/i })).toBeInTheDocument();
  });

  it('displays error when no file is selected', async () => {
    renderWithRouter(<UploadForm />);
    const uploadButton = screen.getByRole('button', { name: /Upload/i });
    fireEvent.click(uploadButton);
    expect(await screen.findByText(/Please select a file and file type/i)).toBeInTheDocument();
  });

  it('displays error for unsupported file type', () => {
    renderWithRouter(<UploadForm />);
    const fileInput = screen.getByLabelText(/File:/i);
    const file = new File(['dummy content'], 'example.txt', { type: 'text/plain' });
    fireEvent.change(fileInput, { target: { files: [file] } });
    expect(screen.getByText(/Invalid file type. Please choose a supported file/i)).toBeInTheDocument();
  });
});

  
// missing error messages for filetype and 