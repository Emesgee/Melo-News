import React from 'react';
import { getByLabelText, render, screen ,fireEvent} from '@testing-library/react';
import '@testing-library/jest-dom';
import Register from '../src/pages/Register';

import { registerUser } from '../src/services/api';


// Mocking the API call
jest.mock('../src/services/api', () => ({
  registerUser: jest.fn(),
}));


describe('Register Component', () => {
    beforeEach(() => {
        jest.clearAllMocks();
      });

  it('renders Register component heading correctly', () => {
    render(<Register />);
    expect(screen.getByRole('heading', { name: 'Register' })).toBeInTheDocument();
  });

  it('renders input fields correctly', () => {
    render(<Register />);
    expect(screen.getByLabelText('Name')).toBeInTheDocument();
    expect(screen.getByLabelText('Email')).toBeInTheDocument();
    expect(screen.getByLabelText('Password')).toBeInTheDocument();
  });

  it('renders the register button correctly', () => {
    render(<Register />);
    expect(screen.getByRole('button', { name: 'Register' })).toBeInTheDocument();
  });

  it('allows the user to fill out the form fields', () => {
    render(<Register />);

    const nameInput = screen.getByLabelText('Name');
    const emailInput = screen.getByLabelText('Email');
    const passwordInput = screen.getByLabelText('Password');

    fireEvent.change(nameInput, { target: { value: 'John Doe' } });
    fireEvent.change(emailInput, { target: { value: 'john@example.com' } });
    fireEvent.change(passwordInput, { target: { value: 'password123' } });

    expect(nameInput.value).toBe('John Doe');
    expect(emailInput.value).toBe('john@example.com');
    expect(passwordInput.value).toBe('password123');
  });

  it('shows success message when registration is successful', async () => {
    // Mocking a successful API response
    registerUser.mockResolvedValueOnce({ message: 'Registration successful!' });

    render(<Register />);

    fireEvent.change(screen.getByLabelText('Name'), { target: { value: 'John Doe' } });
    fireEvent.change(screen.getByLabelText('Email'), { target: { value: 'john@example.com' } });
    fireEvent.change(screen.getByLabelText('Password'), { target: { value: 'password123' } });

    fireEvent.click(screen.getByRole('button', { name: 'Register' }));

    const message = await screen.findByText('Registration successful!');
    expect(message).toBeInTheDocument();
  });

  it('shows error message when registration fails', async () => {
    // Mocking a failed API response
    registerUser.mockRejectedValueOnce({
      response: { data: { message: 'Email already exists' } },
    });

    render(<Register />);

    fireEvent.change(screen.getByLabelText('Name'), { target: { value: 'Jane Doe' } });
    fireEvent.change(screen.getByLabelText('Email'), { target: { value: 'jane@example.com' } });
    fireEvent.change(screen.getByLabelText('Password'), { target: { value: 'password123' } });

    fireEvent.click(screen.getByRole('button', { name: 'Register' }));

    const errorMessage = await screen.findByText('Email already exists');
    expect(errorMessage).toBeInTheDocument();
  });

  it('shows generic error message when registration fails without specific message', async () => {
    // Mocking a failed API response without a specific message
    registerUser.mockRejectedValueOnce(new Error('Network error'));

    render(<Register />);

    fireEvent.change(screen.getByLabelText('Name'), { target: { value: 'Jane Doe' } });
    fireEvent.change(screen.getByLabelText('Email'), { target: { value: 'jane@example.com' } });
    fireEvent.change(screen.getByLabelText('Password'), { target: { value: 'password123' } });

    fireEvent.click(screen.getByRole('button', { name: 'Register' }));

    const errorMessage = await screen.findByText('Registration failed');
    expect(errorMessage).toBeInTheDocument();
  });
});